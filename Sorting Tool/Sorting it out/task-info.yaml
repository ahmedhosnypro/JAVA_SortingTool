type: edu
custom_name: stage3
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: src/sorting/DataType.java
  visible: true
  text: |
    package sorting;

    public enum DataType {
        LONG("numbers", "greatest number"),
        LINE("lines", "longest line"),
        WORD("words", "longest word");

        private final String totalToPrint;
        private final String maxToPrint;

        DataType(String totalToPrint, String maxToPrint) {
            this.totalToPrint = totalToPrint;
            this.maxToPrint = maxToPrint;
        }

        public String getTotalToPrint() {
            return totalToPrint;
        }

        public String getMaxToPrint() {
            return maxToPrint;
        }
    }
  learner_created: true
- name: src/sorting/LongProcessor.java
  visible: true
  text: |
    package sorting;

    public class LongProcessor extends DataProcessor<Long> {

        public LongProcessor() {
            super.type = DataType.LONG;
        }

        @Override
        public void readData() {
            while (scanner.hasNext()) {
                data.add(Long.parseLong(scanner.next().trim()));
            }
        }

        @Override
        public DataType getType() {
            return type;
        }
    }
  learner_created: true
- name: src/sorting/DataProcessor.java
  visible: true
  text: |
    package sorting;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public abstract class DataProcessor<T> {

        static final Scanner scanner = new Scanner(System.in);
        ArrayList<T> data = new ArrayList<>();
        DataType type;
        T max;
        int maxCount;
        int maxPercent;

        abstract void readData();

        int getSize() {
            return data.size();
        }

        public List<T> getData() {
            return data;
        }

        public T getMax() {
            return max;
        }

        public int getMaxCount() {
            return maxCount;
        }

        public DataType getType() {
            return type;
        }

        public int getMaxPercent() {
            return maxPercent;
        }

        public void setMax(T max) {
            this.max = max;
        }

        public void setMaxCount(int maxCount) {
            this.maxCount = maxCount;
        }

        public void setMaxPercent() {
            maxPercent = (int) (((double) maxCount / (double) getSize()) *100);
        }
    }
  learner_created: true
- name: src/sorting/App.java
  visible: true
  text: |
    package sorting;

    public class App {
        private App() {
        }

        static void start(String[] args) {
            if (args.length == 0) {
                processWords();
            } else {
                if (args[0].equalsIgnoreCase("-dataType")) {
                    String dataType = args[1];
                    switch (dataType) {
                        case "long" -> processLongs();
                        case "line" -> processLine();
                        case "word" -> processWords();
                    }
                }
            }
        }

        private static void processLongs() {
            DataProcessor<Long> dataProcessor = new LongProcessor();
            Analyzer<Long> analyzer = new Analyzer<>();
            dataProcessor.readData();
            analyzer.setStrategy(new LongAnalyzer());
            analyzer.analyze(dataProcessor);
            System.out.println("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "The " + dataProcessor.getType().getMaxToPrint() + ": " + dataProcessor.getMax()
                    + " (" + dataProcessor.getMaxCount() + " time(s), " + dataProcessor.getMaxPercent() + "%).");
        }

        private static void processLine() {
            DataProcessor<String> dataProcessor = new LineProcessor();
            Analyzer<String> analyzer = new Analyzer<>();
            dataProcessor.readData();
            analyzer.setStrategy(new StringAnalyzer());
            analyzer.analyze(dataProcessor);
            System.out.println("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "The " + dataProcessor.getType().getMaxToPrint() + ":\n" + dataProcessor.getMax() + "\n"
                    + "(" + dataProcessor.getMaxCount() + " time(s), " + dataProcessor.getMaxPercent() + "%).");
        }

        private static void processWords() {
            DataProcessor<String> dataProcessor = new WordProcessor();
            Analyzer<String> analyzer = new Analyzer<>();
            dataProcessor.readData();
            analyzer.setStrategy(new StringAnalyzer());
            analyzer.analyze(dataProcessor);
            System.out.println("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "The " + dataProcessor.getType().getMaxToPrint() + ": " + dataProcessor.getMax()
                    + " (" + dataProcessor.getMaxCount() + " time(s), " + dataProcessor.getMaxPercent() + "%).");
        }
    }
  learner_created: true
- name: src/sorting/Analyzer.java
  visible: true
  text: |
    package sorting;

    public class Analyzer <T>{
        private AnalyzeStrategy<T> strategy;

        public void analyze(DataProcessor<T> dataProcessor) {
            strategy.analyze(dataProcessor);
        }

        public void setStrategy(AnalyzeStrategy<T> strategy) {
            this.strategy = strategy;
        }
    }
  learner_created: true
- name: src/sorting/WordProcessor.java
  visible: true
  text: |
    package sorting;

    public class WordProcessor extends DataProcessor<String> {

        public WordProcessor() {
            super.type = DataType.WORD;
        }

        @Override
        public void readData() {
            while (scanner.hasNext()) {
                data.add(scanner.next().trim());
            }
        }
    }
  learner_created: true
- name: src/sorting/LineProcessor.java
  visible: true
  text: |
    package sorting;

    public class LineProcessor extends DataProcessor<String> {

        public LineProcessor() {
            super.type = DataType.LINE;
        }

        @Override
        public void readData() {
            while (scanner.hasNext()) {
                data.add(scanner.nextLine().trim());
            }
        }
    }
  learner_created: true
- name: src/sorting/LongAnalyzer.java
  visible: true
  text: |-
    package sorting;

    import java.util.Objects;

    public class LongAnalyzer implements AnalyzeStrategy<Long> {
        @Override
        public void analyze(DataProcessor<Long> dataProcessor) {
            var optionalMax = dataProcessor.getData().stream().max(Long::compareTo);
            if (optionalMax.isPresent()) {
                dataProcessor.setMax(optionalMax.get());
                dataProcessor.setMaxCount((int) dataProcessor.getData().stream().filter(n -> Objects.equals(n, optionalMax.get())).count());
                dataProcessor.setMaxPercent();
            }
        }
    }
  learner_created: true
- name: src/sorting/StringAnalyzer.java
  visible: true
  text: |
    package sorting;

    import java.util.Optional;

    public class StringAnalyzer implements AnalyzeStrategy<String> {
        @Override
        public void analyze(DataProcessor<String> dataProcessor) {
            Optional<String> optionalMax = dataProcessor.getData().stream().max((l1, l2) -> {
                if (l1.length() > l2.length()) {
                    return 1;
                } else if (l1.length() < l2.length()) {
                    return -1;
                } else {
                    return l1.compareToIgnoreCase(l2);
                }
            });
            if (optionalMax.isPresent()) {
                dataProcessor.setMax(optionalMax.get());
                dataProcessor.setMaxCount((int) dataProcessor.getData().stream().filter(l -> l.equals(optionalMax.get())).count());
                dataProcessor.setMaxPercent();
            }
        }
    }
  learner_created: true
- name: src/sorting/AnalyzeStrategy.java
  visible: true
  text: |
    package sorting;

    public interface AnalyzeStrategy <T>{
        abstract void analyze(DataProcessor<T> dataProcessor);
    }
  learner_created: true
- name: test/common/SortingToolStage3Test.kt
  visible: false
  text: |
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*
    import kotlin.math.roundToInt

    class SortingToolStage3Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage1Tests() + stage2Tests() + stage3Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "-sortIntegers" in clue.args -> checkNatural(
                        parseLongTokens(clue.consoleInput),
                        ::parseLongTokens,
                        clue,
                        reply
                )

                "long" in clue.args -> checkForLong(clue, reply)
                "word" in clue.args -> checkForWord(clue, reply)
                "line" in clue.args -> checkForLine(clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage1Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   33 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true
                ),
                createTest("1 2 2 3 4 5 5", true),
                createTest("1 1 2 2 3 4 4 4", false)
        )
    }


    fun stage2Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "word"
                ),
                createTest(
                        """abcc de a""".trimMargin(),
                        false,
                        "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "line"
                ),
                createTest(
                        """
                    |1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-dataType", "line"
                )
        )
    }


    fun stage3Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "word", "-sortIntegers"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortIntegers"
                ),
                createTest(
                        """
                    |1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortIntegers", "-dataType", "line"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun checkForLong(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val regex = """(\d+)\D+(\d+)\D+(\d+)""".toRegex()
        val matchResult = regex.find(reply)
        if (matchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output. Please check if your output contains three numbers\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output.")
            }
        }

        val (totalNumbers, greatestNumber, greatestNumberCount) = matchResult.groupValues.drop(1).map { it.toInt() }

        val scanner = Scanner(clue.consoleInput)

        val actualNumbers = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            actualNumbers.add(scanner.nextInt())
        }

        val actualTotal = actualNumbers.size

        if (actualTotal != totalNumbers) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total numbers ($totalNumbers) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total numbers are incorrect.")
            }
        }

        val actualMax = actualNumbers.maxOrNull()

        if (actualMax != greatestNumber) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Greatest number ($greatestNumber) is incorrect. Expected: $actualMax.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Greatest number is incorrect.")
            }
        }

        val actualMaxCount = actualNumbers.count { it == actualMax }

        if (actualMaxCount != greatestNumberCount) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Greatest number times ($greatestNumberCount) are incorrect. Expected: $actualMaxCount.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Greatest number times are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun checkForWord(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val regex = """(\d+)\D+: (.+) \(\D*(\d+)\D+(\d+)\D*\)""".toRegex()
        val matchResult = regex.find(reply)
        if (matchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output.")
            }
        }

        val totalWords = matchResult.groupValues[1].toInt()
        val word = matchResult.groupValues[2]
        val longestWordCount = matchResult.groupValues[3].toInt()
        val longestWordPercentage = matchResult.groupValues[4].toInt()

        val scanner = Scanner(clue.consoleInput)

        val actualWords = mutableListOf<String>()

        while (scanner.hasNext()) {
            actualWords.add(scanner.next())
        }

        val actualTotal = actualWords.size

        if (actualTotal != totalWords) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total words ($totalWords) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total words are incorrect.")
            }
        }

        val actualMax = actualWords.maxByOrNull { it.length }

        if (actualMax != word) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest word ($word) is incorrect. Expected: $actualMax.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest word is incorrect.")
            }
        }

        val actualMaxCount = actualWords.count { it == actualMax }

        if (actualMaxCount != longestWordCount) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest word times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest word times are incorrect.")
            }
        }

        val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()

        if (actualPercentage != longestWordPercentage) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Percentage is incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun checkForLine(clue: SortingToolClue, reply_: String): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 4) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 4 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 4 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalLines = totalMatchResult.groupValues[1].toInt()
        val line = lines[2]

        val countRegex = """(\d+)\D+(\d+)""".toRegex()
        val countMatchResult = countRegex.find(lines[3])
        if (countMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find two numbers in the last line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find two numbers in the last line of your output.")
            }
        }

        val longestWordCount = countMatchResult.groupValues[1].toInt()
        val longestWordPercentage = countMatchResult.groupValues[2].toInt()

        val actualLines = clue.consoleInput.lines()

        val actualTotal = actualLines.size

        if (actualTotal != totalLines) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total lines ($totalLines) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total lines are incorrect.")
            }
        }

        val actualMax = actualLines.maxByOrNull { it.length }

        if (actualMax != line) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest line ($line) is incorrect. Expected: $actualMax.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest line is incorrect.")
            }
        }

        val actualMaxCount = actualLines.count { it == actualMax }

        if (actualMaxCount != longestWordCount) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Longest line times ($longestWordCount) are incorrect. Expected: $actualMaxCount.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Longest line times are incorrect.")
            }
        }

        val actualPercentage = (actualMaxCount * 100.0 / actualTotal).roundToInt()

        if (actualPercentage != longestWordPercentage) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Percentage ($longestWordPercentage) is incorrect. Expected: $actualPercentage.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Percentage is incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5383#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 30 Mar 2022 02:21:42 UTC
record: 3
