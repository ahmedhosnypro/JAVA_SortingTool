type: edu
custom_name: stage4
files:
- name: src/sorting/Main.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public class Main {
        public static void main(final String[] args) {
            Scanner scanner = new Scanner(System.in);

            while (scanner.hasNextLong()) {
                long number = scanner.nextLong();
                // write your code here
            }
        }
    }
  learner_created: false
- name: src/sorting/DataType.java
  visible: true
  text: |
    package sorting;

    public enum DataType {
        LONG("numbers", "greatest number"),
        LINE("lines", "longest line"),
        WORD("words", "longest word");

        private final String totalToPrint;
        private final String maxToPrint;

        DataType(String totalToPrint, String maxToPrint) {
            this.totalToPrint = totalToPrint;
            this.maxToPrint = maxToPrint;
        }

        public String getTotalToPrint() {
            return totalToPrint;
        }

        public String getMaxToPrint() {
            return maxToPrint;
        }
    }
  learner_created: true
- name: src/sorting/LongProcessor.java
  visible: true
  text: |
    package sorting;

    public class LongProcessor extends DataProcessor<Long> {

        public LongProcessor() {
            super.type = DataType.LONG;
            super.comparator = Long::compareTo;
        }

        @Override
        public void readData() {
            while (scanner.hasNext()) {
                data.add(Long.parseLong(scanner.next().trim()));
            }
        }

        @Override
        public DataType getType() {
            return type;
        }
    }
  learner_created: true
- name: src/sorting/DataProcessor.java
  visible: true
  text: |
    package sorting;

    import java.util.*;

    public abstract class DataProcessor<T> {

        static final Scanner scanner = new Scanner(System.in);
        ArrayList<T> data = new ArrayList<>();
        DataType type;
        T max;
        int maxCount;
        int maxPercent;
        Comparator<T> comparator;

        abstract void readData();

        void sortData() {
            if (Objects.nonNull(comparator)){
                data.sort(comparator);
            }
        }

        int getSize() {
            return data.size();
        }

        public List<T> getData() {
            return data;
        }

        public T getMax() {
            return max;
        }

        public int getMaxCount() {
            return maxCount;
        }

        public DataType getType() {
            return type;
        }

        public int getMaxPercent() {
            return maxPercent;
        }

        public Comparator<T> getComparator() {
            return comparator;
        }

        public void setMax(T max) {
            this.max = max;
        }

        public void setMaxCount(int maxCount) {
            this.maxCount = maxCount;
        }

        public void setMaxPercent() {
            maxPercent = (int) (((double) maxCount / (double) getSize()) * 100);
        }
    }
  learner_created: true
- name: src/sorting/App.java
  visible: true
  text: |
    package sorting;

    public class App {
        private App() {
        }

        static void start(String[] args) {
            if (args.length == 0) {
                processWords();
            } else {
                for (var arg : args) {
                    if (arg.equalsIgnoreCase("-sortIntegers")) {
                        sortIntegers();
                        return;
                    }
                }
                if (args[0].equalsIgnoreCase("-dataType")) {
                    String dataType = args[1];
                    switch (dataType) {
                        case "long" -> processLongs();
                        case "line" -> processLine();
                        case "word" -> processWords();
                    }
                }
            }
        }

        private static void processLongs() {
            DataProcessor<Long> dataProcessor = new LongProcessor();
            Analyzer<Long> analyzer = new Analyzer<>();
            dataProcessor.readData();
            analyzer.setStrategy(new LongAnalyzer());
            analyzer.analyze(dataProcessor);
            System.out.println("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "The " + dataProcessor.getType().getMaxToPrint() + ": " + dataProcessor.getMax()
                    + " (" + dataProcessor.getMaxCount() + " time(s), " + dataProcessor.getMaxPercent() + "%).");
        }

        private static void sortIntegers() {
            DataProcessor<Long> dataProcessor = new LongProcessor();
            dataProcessor.readData();
            dataProcessor.sortData();
            System.out.print("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "Sorted data: ");
            dataProcessor.getData().forEach(d -> System.out.print(d + " "));
        }

        private static void processLine() {
            DataProcessor<String> dataProcessor = new LineProcessor();
            Analyzer<String> analyzer = new Analyzer<>();
            dataProcessor.readData();
            analyzer.setStrategy(new StringAnalyzer());
            analyzer.analyze(dataProcessor);
            System.out.println("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "The " + dataProcessor.getType().getMaxToPrint() + ":\n" + dataProcessor.getMax() + "\n"
                    + "(" + dataProcessor.getMaxCount() + " time(s), " + dataProcessor.getMaxPercent() + "%).");
        }

        private static void processWords() {
            DataProcessor<String> dataProcessor = new WordProcessor();
            Analyzer<String> analyzer = new Analyzer<>();
            dataProcessor.readData();
            analyzer.setStrategy(new StringAnalyzer());
            analyzer.analyze(dataProcessor);
            System.out.println("Total " + dataProcessor.getType().getTotalToPrint() + ": " + dataProcessor.getSize() + ".\n"
                    + "The " + dataProcessor.getType().getMaxToPrint() + ": " + dataProcessor.getMax()
                    + " (" + dataProcessor.getMaxCount() + " time(s), " + dataProcessor.getMaxPercent() + "%).");
        }
    }
  learner_created: true
- name: src/sorting/WordProcessor.java
  visible: true
  text: |
    package sorting;

    public class WordProcessor extends DataProcessor<String> {

        public WordProcessor() {
            super.type = DataType.WORD;
            super.comparator = (l1, l2) -> {
                if (l1.length() > l2.length()) {
                    return 1;
                } else if (l1.length() < l2.length()) {
                    return -1;
                } else {
                    return l1.compareToIgnoreCase(l2);
                }
            };
        }

        @Override
        public void readData() {
            while (scanner.hasNext()) {
                data.add(scanner.next().trim());
            }
        }
    }
  learner_created: true
- name: src/sorting/LineProcessor.java
  visible: true
  text: |
    package sorting;

    public class LineProcessor extends DataProcessor<String> {

        public LineProcessor() {
            super.type = DataType.LINE;
            super.comparator = (l1, l2) -> {
                if (l1.length() > l2.length()) {
                    return 1;
                } else if (l1.length() < l2.length()) {
                    return -1;
                } else {
                    return l1.compareToIgnoreCase(l2);
                }
            };
        }

        @Override
        public void readData() {
            while (scanner.hasNext()) {
                data.add(scanner.nextLine().trim());
            }
        }
    }
  learner_created: true
- name: test/common/SortingToolStage4Test.kt
  visible: false
  text: |+
    package common

    import org.hyperskill.hstest.stage.StageTest
    import org.hyperskill.hstest.testcase.CheckResult
    import org.hyperskill.hstest.testcase.TestCase
    import org.hyperskill.hstest.testing.Settings
    import java.util.*

    class SortingToolStage4Test : StageTest<SortingToolClue>() {

        init {
            Settings.allowOutOfInput = true
        }

        override fun generate(): List<TestCase<SortingToolClue>> {
            return stage4Tests()
        }

        override fun check(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "byCount" in clue.args -> checkByCount(reply, clue)
                else -> checkNatural(reply, clue)
            }
        }

        private fun checkByCount(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkByCount(parseLongTokens(clue.consoleInput), { it.toInt() }, clue, reply)
                "word" in clue.args -> checkByCount(parseWordTokens(clue.consoleInput), { it }, clue, reply)
                "line" in clue.args -> checkByCount(parseLineTokens(clue.consoleInput), { it }, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }

        private fun checkNatural(reply: String, clue: SortingToolClue): CheckResult {
            return when {
                "long" in clue.args -> checkNatural(parseLongTokens(clue.consoleInput), ::parseLongTokens, clue, reply)
                "word" in clue.args -> checkNatural(parseWordTokens(clue.consoleInput), ::parseWordTokens, clue, reply)
                "line" in clue.args -> checkNatural(parseLineTokens(clue.consoleInput), ::parseLineTokens, clue, reply)

                else -> throw IllegalArgumentException("Bad test: no data type found")
            }
        }
    }

    fun stage4Tests(): List<TestCase<SortingToolClue>> {
        return listOf(
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long", "-sortingType", "natural"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "long"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1 -2   333 4
                    |42
                    |42
                    |1                 1
                    """.trimMargin(),
                        true,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "line"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "word"
                ),
                createTest(
                        """
                    |1111 1111
                    |22222
                    |3
                    |44
                    """.trimMargin(),
                        false,
                        "-sortingType", "byCount", "-dataType", "long"
                )
        )
    }



    fun revealRawTest(clue: SortingToolClue, reply: String): String {
        return with(clue) { "Args:\n${args.joinToString(" ")}\nInput:\n$consoleInput\nYour output:\n$reply\n\n" }
    }

    class SortingToolClue(val consoleInput: String, val revealTest: Boolean, val args: List<String>)

    fun createTest(
            consoleInput: String,
            revealTest: Boolean,
            vararg args: String = arrayOf("-dataType", "long")
    ): TestCase<SortingToolClue> {
        return TestCase<SortingToolClue>()
                .setAttach(SortingToolClue(consoleInput, revealTest, args.toList()))
                .setInput(consoleInput)
                .addArguments(*args)
    }

    fun parseLongTokens(input: String): List<Int> {
        val scanner = Scanner(input)

        val longTokens = mutableListOf<Int>()

        while (scanner.hasNextInt()) {
            longTokens.add(scanner.nextInt())
        }

        return longTokens
    }

    fun parseWordTokens(input: String): List<String> {
        val scanner = Scanner(input)

        val wordTokens = mutableListOf<String>()

        while (scanner.hasNext()) {
            wordTokens.add(scanner.next())
        }

        return wordTokens
    }

    fun parseLineTokens(input: String): List<String> {
        return input.lines()
    }

    fun <TokenType : Comparable<TokenType>> checkNatural(
            actualTokens: List<TokenType>,
            sortedTokensParser: (String) -> List<TokenType>,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        if (lines.size != 2) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't parse your output: expected 2 lines.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't parse your output: expected 2 lines.")
            }
        }

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val sortedActualTokens = actualTokens.sorted()

        val sortedTokens = sortedTokensParser(lines[1].substringAfter(":").dropWhile { it in setOf('\n', '\r') })

        val total = sortedTokens.size

        if (actualTotal != total) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total sorted tokens ($total) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total sorted tokens are incorrect.")
            }
        }

        if (sortedActualTokens != sortedTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Sorted tokens are incorrect.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Sorted tokens are incorrect.")
            }
        }

        return CheckResult(true)
    }

    fun <TokenType : Comparable<TokenType>> checkByCount(
            actualTokens: List<TokenType>,
            tokenParser: (String) -> TokenType,
            clue: SortingToolClue,
            reply_: String
    ): CheckResult {
        val reply = reply_.trim()
        val lines = reply.lines()

        val totalRegex = """(\d+)""".toRegex()
        val totalMatchResult = totalRegex.find(lines[0])
        if (totalMatchResult == null) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Can't find number in the first line of your output.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Can't find number in the first line of your output.")
            }
        }

        val totalTokens = totalMatchResult.groupValues[1].toInt()

        val actualTotal = actualTokens.size

        if (actualTotal != totalTokens) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Total tokens ($totalTokens) are incorrect. Expected: $actualTotal.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Total tokens are incorrect.")
            }
        }

        val tokenToCount = mutableMapOf<TokenType, Int>()

        for (token in actualTokens) {
            tokenToCount[token] = (tokenToCount[token] ?: 0) + 1
        }

        val actualSortedByCount = tokenToCount.toList().sortedWith(compareBy({ it.second }, { it.first }))
        val linesWithTokens = lines.drop(1)

        if (actualSortedByCount.size != linesWithTokens.size) {
            return if (clue.revealTest) {
                CheckResult(
                        false,
                        "Lines with tokens (${linesWithTokens.size}) are incorrect. Expected: ${actualSortedByCount.size}.\n" +
                                revealRawTest(clue, reply)
                )
            } else {
                CheckResult(false, "Lines with tokens are incorrect.")
            }
        }

        for ((lineId, line) in linesWithTokens.withIndex()) {
            val token = tokenParser(line.substringBefore(':'))
            val info = line.substringAfter(':')

            val (actualToken, actualTimes) = actualSortedByCount[lineId]

            if (token != actualToken) {
                return if (clue.revealTest) {
                    CheckResult(
                            false,
                            "Token ($token) is incorrect. Expected: $actualToken.\n" +
                                    revealRawTest(clue, reply)
                    )
                } else {
                    CheckResult(false, "Token is incorrect.")
                }
            }

            // TODO: check info (times and percentage)
        }

        return CheckResult(true)
    }


  learner_created: false
feedback_link: https://hyperskill.org/learn/step/5384#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 31 Mar 2022 09:38:24 UTC
record: 4
